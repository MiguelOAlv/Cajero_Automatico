/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Cajero;

import static Cajero.Metodos.formatearFecha;
import Conexion_bd.Conexion;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author Miguel
 */
public class RetirarEfectivo extends javax.swing.JFrame {

    /**
     * Creates new form Opciones_admin
     */

    public RetirarEfectivo (Sesion sesion_usuario,int cuenta) {
        initComponents();
        this.ID_Cliente=sesion_usuario.getID_Cliente();
        this.Nombre = sesion_usuario.getNombre();
        this.pin = sesion_usuario.getPin();
        this.cuenta = cuenta;
        this.TarjetaCredito=sesion_usuario.getTarjetaCredito();
        this.idioma=sesion_usuario.getIdioma();
        cargarIdioma(this.idioma);
        this.Sesion = sesion_usuario;
        this.Sesion.iniciarSesion();
        this.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                sesion_usuario.mantenerSesion();
            }
        });
        this.fecha = LocalDate.now();
        sesion_usuario.setFrameActual(this);
        jPanel2.setBackground(new Color(0, 0, 0, 0));
    }
   public void cargarIdioma(Idioma idioma){
        Properties propiedades = new Idioma(idioma.getNombre());
        this.setTitle(propiedades.getProperty("RetirarEfectivo"));
        btnRetirar2.setText(propiedades.getProperty("btnRetirar2"));
        btnRetroceder.setText(propiedades.getProperty("btnRetroceder"));
        lblSeleccion.setText(propiedades.getProperty("lblSeleccion"));
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSeleccion = new javax.swing.JLabel();
        txfCantidad = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        btnRetroceder = new javax.swing.JButton();
        btnRetirar2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Usuario");
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSeleccion.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblSeleccion.setForeground(new java.awt.Color(0, 0, 0));
        lblSeleccion.setText("Seleccione la cantidad que desea retirar:");
        getContentPane().add(lblSeleccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 350, 30));
        getContentPane().add(txfCantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 240, 40));

        jPanel2.setLayout(new java.awt.GridLayout(1, 0, 250, 0));

        btnRetroceder.setBackground(new java.awt.Color(255, 255, 255));
        btnRetroceder.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRetroceder.setForeground(new java.awt.Color(0, 0, 0));
        btnRetroceder.setText("Retroceder");
        btnRetroceder.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnRetroceder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetrocederActionPerformed(evt);
            }
        });
        jPanel2.add(btnRetroceder);

        btnRetirar2.setBackground(new java.awt.Color(51, 255, 51));
        btnRetirar2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRetirar2.setForeground(new java.awt.Color(0, 0, 0));
        btnRetirar2.setText("Retirar");
        btnRetirar2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRetirar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetirar2ActionPerformed(evt);
            }
        });
        jPanel2.add(btnRetirar2);

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, 540, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo_admin.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 350));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRetrocederActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetrocederActionPerformed
        Opciones_usuario Opciones_usuario = new Opciones_usuario(this.Sesion);
        Opciones_usuario.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRetrocederActionPerformed

    private void btnRetirar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetirar2ActionPerformed
        if(txfCantidad.getText().equals("") || Integer.parseInt(txfCantidad.getText())%5!=0 ){
            JOptionPane.showMessageDialog(this, "Debe introducir una cantidad multiplo de 5 para poder retirar", "Error", JOptionPane.ERROR_MESSAGE);
        }else{
            try {
            Connection conexionRetirar = Conexion.mySQL("proyecto_final", "root", "");
            Statement sentenciaRetirar = conexionRetirar.createStatement();
            String sqlRetirar = "SELECT Saldo FROM cuentas WHERE ID_Cliente = "+this.ID_Cliente+" AND ID_Cuenta="+this.cuenta+";";
            ResultSet resultadoRetirar = sentenciaRetirar.executeQuery(sqlRetirar);
            if(resultadoRetirar.next()){
                int saldo = resultadoRetirar.getInt("Saldo");
                int cantidadRetirar = Integer.parseInt(txfCantidad.getText());
                if(saldo<cantidadRetirar){
                    JOptionPane.showMessageDialog(this, "No tiene saldo suficiente para realizar la retirada", "Error", JOptionPane.ERROR_MESSAGE);
                }else{
                    //COMPROBAR QUE NO SE HA PASADO DEL LIMITE DIARIO
                    Connection conexionLimite = Conexion.mySQL("proyecto_final", "root", "");
                    Statement sentenciaLimite = conexionLimite.createStatement();
                    String sqlLimite = "SELECT Limite_de_credito FROM tarjetas_de_credito WHERE ID_Cliente = '"+this.ID_Cliente+"' AND ID_Tarjeta='"+this.TarjetaCredito+"'";
                    ResultSet resultadoLimite= sentenciaLimite.executeQuery(sqlLimite);
                    if(resultadoLimite.next()){
                        int limite = resultadoLimite.getInt("Limite_de_credito");
                        int limiteATM = 0;
                        //COMPROBAR EL LIMITE DEL ATM
                        Connection conexionLimiteATM = Conexion.mySQL("proyecto_final", "root", "");
                        Statement sentenciaLimiteATM = conexionLimiteATM.createStatement();
                        String sqlLimiteATM = "SELECT limite_diario FROM cajeros_automaticos WHERE ID_Cajero = 1";
                        ResultSet resultadoLimiteATM= sentenciaLimiteATM.executeQuery(sqlLimiteATM);
                        if(resultadoLimiteATM.next()){
                            limiteATM = resultadoLimiteATM.getInt("limite_diario");
                        }else{
                            JOptionPane.showMessageDialog(this, "Error interno, consulte con un administrador", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        //CALCULAR EL MONTO DE RETIRADAS DEL ATM ENTRE HOY Y MANANA
                        Connection conexionIntervaloATM = Conexion.mySQL("proyecto_final", "root", "");
                        Statement sentenciaIntervaloATM = conexionIntervaloATM.createStatement();
                        //Declarar la variable manana
                        LocalDate manana = LocalDate.now().plusDays(1);
                        String sManana = formatearFecha(manana);
                        String sqlIntervaloATM = "SELECT SUM(Monto) as MontoATM FROM transacciones_cajeros WHERE ID_Cajero = 1 AND Tipo_transaccion ='Retirada' BETWEEN '"+this.fecha+"' AND '"+sManana+"'";
                        ResultSet resultadoIntervaloATM = sentenciaIntervaloATM.executeQuery(sqlIntervaloATM);
                        int montoATM=0;
                        if(resultadoIntervaloATM.next()){
                            montoATM = resultadoIntervaloATM.getInt("MontoATM");
                        }else{
                            JOptionPane.showMessageDialog(this, "Error interno, consulte con un administrador", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                        //COMPROBAR EL LIMITE DE LA TARJETA CON EL SUMATORIO DE RETIRADAS EN EL INTERVALO DE FECHAS HOY - MANANA
                        Connection conexionIntervalo = Conexion.mySQL("proyecto_final", "root", "");
                        Statement sentenciaIntervalo = conexionIntervalo.createStatement();
                        String sqlIntervalo = "SELECT SUM(Monto) as Monto FROM movimientos WHERE ID_Cliente = '"+this.ID_Cliente+"' AND ID_Tarjeta='"+this.TarjetaCredito+"' AND Tipo_Movimiento ='Retirada' BETWEEN '"+this.fecha+"' AND '"+sManana+"'";
                        ResultSet resultadoIntervalo = sentenciaIntervalo.executeQuery(sqlIntervalo);
                        if(resultadoIntervalo.next()){
                            int monto = resultadoIntervalo.getInt("Monto");
                            //COMPROBAR SI SE HA RETIRADO MAS DEL LIMITE DE LA TARJETA Y MAS DEL LIMITE DEL ATM
                            if(monto+cantidadRetirar>limite || montoATM+cantidadRetirar>limiteATM){
                                JOptionPane.showMessageDialog(this, "La cantidad a retirar supera el limite diario de la tarjeta o del ATM", "Error", JOptionPane.ERROR_MESSAGE);
                            }else{
                                //ACTUALIZAR EL SALDO DE LA CUENTA QUE RETIRA DINERO
                                Connection conexionRetirar2 = Conexion.mySQL("proyecto_final", "root", "");
                                Statement sentenciaRetirar2 = conexionRetirar2.createStatement();
                                int nuevaCantidad = saldo-cantidadRetirar;
                                String sqlRetirar2 = "UPDATE cuentas SET saldo = '"+nuevaCantidad+"' WHERE ID_Cliente = '"+this.ID_Cliente+"' AND ID_Cuenta='"+this.cuenta+"'";
                                int resultadoRetirar2 = sentenciaRetirar2.executeUpdate(sqlRetirar2);
                                
                                //ANADIR OPERACION A LA TABLA DE MOVIMIENTOS
                                Connection conexionMovimientos = Conexion.mySQL("proyecto_final", "root", "");
                                Statement sentenciaMovimientos = conexionMovimientos.createStatement();
                                LocalTime hora=LocalTime.now();
                                String sqlMovimientos = "INSERT INTO movimientos (ID_Cuenta, ID_Tarjeta, ID_Cliente, Fecha, Hora, Tipo_movimiento, Monto) VALUES ("+this.cuenta+","+this.TarjetaCredito+","+this.ID_Cliente+",'"+formatearFecha(this.fecha)+"','"+hora+"','Retirada',"+cantidadRetirar+");";
                                int resultadoMovimientos = sentenciaMovimientos.executeUpdate(sqlMovimientos);

                                //ANADIR RETIRADA A LA TABLA DE TRANSACCIONES
                                Connection conexionTransaccion = Conexion.mySQL("proyecto_final", "root", "");
                                Statement sentenciaTransaccion = conexionTransaccion.createStatement();
                                String sqlTransaccion = "INSERT INTO transacciones_cajeros (ID_Cajero, ID_Tarjeta, Fecha, Hora, Tipo_transaccion, Monto) VALUES ('1',"+this.TarjetaCredito+",'"+formatearFecha(this.fecha)+"','"+hora+"','Retirada','"+cantidadRetirar+"');";
                                int resultadoTransaccion = sentenciaTransaccion.executeUpdate(sqlTransaccion);
                                
                                if(resultadoRetirar2>0 && resultadoMovimientos>0 && resultadoTransaccion>0){
                                    //ACTUALIZAR CANTIDAD TOTAL DEL EFECTIVO EN EL ATM
                                    Connection conexionCantidadTotal = Conexion.mySQL("proyecto_final", "root", "");
                                    Statement sentenciaCantidadTotal = conexionCantidadTotal.createStatement();
                                    String sqlCantidadTotal = "UPDATE cajeros_automaticos SET Cantidad_de_efectivo_actual = Cantidad_de_efectivo_actual - '"+cantidadRetirar+"' WHERE ID_Cajero= 1";
                                    int resultadoCantidadTotal = sentenciaCantidadTotal.executeUpdate(sqlCantidadTotal);
                                    if(resultadoCantidadTotal>0){
                                    JOptionPane.showMessageDialog(this, "Se ha retirado el dinero correctamente, proceda a recogerlo", "Exito", JOptionPane.INFORMATION_MESSAGE);
                                    ObtenerDinero ObtenerDinero = new ObtenerDinero(this.Sesion, cantidadRetirar);
                                    ObtenerDinero.setVisible(true);
                                    this.dispose();
                                }else{
                                    JOptionPane.showMessageDialog(this, "Error en la retirada, intentelo de nuevo o consulte con el administrador", "Error", JOptionPane.INFORMATION_MESSAGE);
                                    }
                                        }
                                    }
                                }   
                            }
                        }
                    }          
            } catch (SQLException ex) {
                Logger.getLogger(RetirarEfectivo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnRetirar2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RetirarEfectivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RetirarEfectivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RetirarEfectivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RetirarEfectivo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRetirar2;
    private javax.swing.JButton btnRetroceder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblSeleccion;
    private javax.swing.JTextField txfCantidad;
    // End of variables declaration//GEN-END:variables
    private String ID_Cliente;
    private String Nombre;
    private String TarjetaCredito;
    private int pin;
    private LocalDate fecha;
    private Sesion Sesion;
    private Idioma idioma;
    private int cuenta;
}
