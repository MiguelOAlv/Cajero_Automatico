/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Cajero;
import Conexion_bd.Conexion;
import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Miguel
 */
public class CuadreCaja extends javax.swing.JFrame {

    /**
     * Creates new form Introducir_Tarjeta
     */
    public CuadreCaja(Sesion sesion_admin){
        this.sesion= sesion_admin;
        initComponents();
        jPanel2.setBackground(new Color(0, 0, 0, 0));
        initJLabel();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txfRetirar = new javax.swing.JTextField();
        txfIngresar = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        lblCajero = new javax.swing.JLabel();
        lblTotalEsperado = new javax.swing.JLabel();
        lblTotalContado = new javax.swing.JLabel();
        lblDiferencia = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnRetroceder = new javax.swing.JButton();
        btnCuadre = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cuadre Caja");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Retirar dinero:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 220, 100, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Nueva fianza:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 180, 100, 30));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Ingresar dinero:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 180, -1, 30));
        getContentPane().add(txfRetirar, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 220, 100, 30));
        getContentPane().add(txfIngresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 180, 100, 30));

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        lblCajero.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        lblCajero.setForeground(new java.awt.Color(0, 0, 0));
        lblCajero.setText("INFORMACIÃ“N DEL ULTIMO ARQUEO");
        jPanel1.add(lblCajero);

        lblTotalEsperado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTotalEsperado.setForeground(new java.awt.Color(0, 0, 0));
        lblTotalEsperado.setText("Total esperado:");
        jPanel1.add(lblTotalEsperado);

        lblTotalContado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTotalContado.setForeground(new java.awt.Color(0, 0, 0));
        lblTotalContado.setText("Total contado:");
        jPanel1.add(lblTotalContado);

        lblDiferencia.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblDiferencia.setForeground(new java.awt.Color(0, 0, 0));
        lblDiferencia.setText("Diferencia:");
        jPanel1.add(lblDiferencia);

        lblFecha.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblFecha.setForeground(new java.awt.Color(0, 0, 0));
        lblFecha.setText("Fecha: ");
        jPanel1.add(lblFecha);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 520, 130));

        jPanel2.setLayout(new java.awt.GridLayout(1, 2, 250, 0));

        btnRetroceder.setBackground(new java.awt.Color(255, 255, 255));
        btnRetroceder.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRetroceder.setForeground(new java.awt.Color(0, 0, 0));
        btnRetroceder.setText("Retroceder");
        btnRetroceder.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRetroceder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetrocederActionPerformed(evt);
            }
        });
        jPanel2.add(btnRetroceder);

        btnCuadre.setBackground(new java.awt.Color(51, 255, 204));
        btnCuadre.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnCuadre.setForeground(new java.awt.Color(0, 0, 0));
        btnCuadre.setText("Cuadrar Caja");
        btnCuadre.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCuadre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCuadreActionPerformed(evt);
            }
        });
        jPanel2.add(btnCuadre);

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 520, 40));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo_admin.png"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(610, 350));
        jLabel1.setMinimumSize(new java.awt.Dimension(610, 350));
        jLabel1.setPreferredSize(new java.awt.Dimension(610, 350));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void initJLabel(){
        try {
            Connection conexionCaja = Conexion.mySQL("proyecto_final", "root", "");
            Statement sentenciaCaja= conexionCaja.createStatement();
            String sqlCaja = "SELECT * FROM arqueos ORDER BY ID_Arqueo DESC LIMIT 1";
            ResultSet resultadoCaja = sentenciaCaja.executeQuery(sqlCaja);
            if(resultadoCaja.next()){
            lblTotalEsperado.setText("Total esperado: "+resultadoCaja.getString("total_esperado"));
            lblTotalContado.setText("Total contado: "+resultadoCaja.getString("total_contado"));
            lblDiferencia.setText("Diferencia: "+resultadoCaja.getString("diferencia"));
            lblFecha.setText("Fecha: "+resultadoCaja.getString("Fecha_arqueo_realizado"));
            }else{
                JOptionPane.showMessageDialog(this, "No se ha encontrado ningun arqueo", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(CuadreCaja.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnRetrocederActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetrocederActionPerformed
        ArqueoCajero ArqueoCajero = new ArqueoCajero(this.sesion);
        ArqueoCajero.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnRetrocederActionPerformed

    private void btnCuadreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCuadreActionPerformed
           try {
                DateTimeFormatter ldformatoFecha = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                LocalDate hoy = LocalDate.now();
                String sHoy = hoy.format(ldformatoFecha);
                LocalTime horaActual = LocalTime.now();
                Time horaSql = Time.valueOf(horaActual);
                
                //METER LA DIFERENCIA DEL ULTIMO ARQUEO EN UNA VARIABLE DE TIPO INT
                String diferenciaTexto = lblDiferencia.getText().trim();
                int cantidadDiferencia=0 ,diferenciapos = diferenciaTexto.indexOf(":");
                    if (diferenciapos != -1) {
                        try {
                        String sDiferencia = diferenciaTexto.substring(diferenciapos + 1).trim();
                        cantidadDiferencia = Integer.parseInt(sDiferencia);
                        } catch (NumberFormatException e) {
                    }
                }
                    
                //METER EL TOTAL ESPERADO EN UNA VARIABLE DE TIPO INT
                String esperadoTexto = lblTotalEsperado.getText().trim();
                int cantidadEsperado=0 ,esperadopos = esperadoTexto.indexOf(":");
                    if (esperadopos != -1) {
                        try {
                        String sEsperado = esperadoTexto.substring(esperadopos + 1).trim();
                        cantidadEsperado = Integer.parseInt(sEsperado);
                        } catch (NumberFormatException e) {
                    }
                }
                    
                if(txfIngresar.getText().isEmpty()==false && txfRetirar.getText().isEmpty()){
                    int cantidadIngresar = 0;
                try {
                        cantidadIngresar = Integer.parseInt(txfIngresar.getText().trim());
                    } catch(NumberFormatException e) {
                        
                    }
                
                //COMPROBAR POSIBLES CASOS
                if(cantidadDiferencia<0) {
                    if(cantidadIngresar>cantidadDiferencia){
                         JOptionPane.showMessageDialog(this, "La cantidad a depositar excede la diferencia actual. Se depositarÃ¡ solo la diferencia.", "AtenciÃ³n", JOptionPane.INFORMATION_MESSAGE);
                         cantidadIngresar=cantidadDiferencia;
                         cantidadIngresar=cantidadIngresar*-1;
                    }else{
                        cantidadDiferencia=cantidadIngresar - cantidadDiferencia;
                        JOptionPane.showMessageDialog(this, "La cantidad a depositar es menor que la diferencia actual. Todavia existe "+cantidadDiferencia+" de diferencia", "AtenciÃ³n", JOptionPane.INFORMATION_MESSAGE);
                    }
                }else{
                    JOptionPane.showMessageDialog(this, "La diferencia es positiva, no puedes ingresar mas dinero", "AtenciÃ³n", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                
                Connection conexionIngresar = Conexion.mySQL("proyecto_final", "root", "");
                Statement sentenciaIngresar= conexionIngresar.createStatement();
                String sqlIngresar = "INSERT INTO transacciones_cajeros (ID_Cajero,Fecha,Hora,Tipo_transaccion,Monto)VALUES(1,'"+sHoy+"','"+horaSql+"','Deposito',"+cantidadIngresar+");";
                int resultadoIngresar = sentenciaIngresar.executeUpdate(sqlIngresar);
                if(resultadoIngresar>0){
                    JOptionPane.showMessageDialog(this, "Se ha ingresado correctamente el dinero", "Exito", JOptionPane.INFORMATION_MESSAGE);
                }
                }
                 if(txfIngresar.getText().isEmpty() && txfRetirar.getText().isEmpty()==false){
                    int cantidadRetirar = 0;
                try {
                    cantidadRetirar = Integer.parseInt(txfRetirar.getText().trim());
                } catch (NumberFormatException e) {
                }
                
                //COMPROBAR POSIBLES CASOS
                if (cantidadDiferencia<0) {
                    JOptionPane.showMessageDialog(this, "La diferencia es negativa, no puedes retirar mas dinero", "AtenciÃ³n", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }else{
                    if(cantidadRetirar<cantidadDiferencia){
                        cantidadRetirar=cantidadRetirar*-1;
                        cantidadDiferencia=cantidadDiferencia + cantidadRetirar;
                        JOptionPane.showMessageDialog(this, "La cantidad a retirar es menor que la diferencia actual. Todavia existe "+cantidadDiferencia+" de diferencia", "AtenciÃ³n", JOptionPane.INFORMATION_MESSAGE);
                    }else{
                        cantidadRetirar=cantidadRetirar*-1;
                        cantidadRetirar = cantidadDiferencia;
                        cantidadRetirar=cantidadRetirar*-1;
                        JOptionPane.showMessageDialog(this, "La cantidad a retirar excede la diferencia actual. Se retirarÃ¡ solo la diferencia.", "AtenciÃ³n", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                
                Connection conexionRetirar = Conexion.mySQL("proyecto_final", "root", "");
                Statement sentenciaRetirar= conexionRetirar.createStatement();
                String sqlRetirar = "INSERT INTO transacciones_cajeros (ID_Cajero,Fecha,Hora,Tipo_transaccion,Monto)VALUES(1,'"+sHoy+"','"+horaSql+"','Retirada','"+cantidadRetirar+"');";
                int resultadoRetirar = sentenciaRetirar.executeUpdate(sqlRetirar);
                if(resultadoRetirar>0){
                    JOptionPane.showMessageDialog(this, "Se ha retirado correctamente el dinero", "Exito", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
                 
                nuevaCantidad = cantidadEsperado - cantidadDiferencia;
                Connection conexionCuadrar = Conexion.mySQL("proyecto_final", "root", "");
                Statement sentenciaCuadrar= conexionCuadrar.createStatement();
                String sqlCuadrar = "UPDATE arqueos SET total_esperado = '"+nuevaCantidad+"' WHERE (Fecha_arqueo_realizado, Hora) = (SELECT Fecha_arqueo_realizado, Hora FROM arqueos ORDER BY Fecha_arqueo_realizado DESC, Hora DESC LIMIT 1);";
                int resultadoCuadrar = sentenciaCuadrar.executeUpdate(sqlCuadrar);
                if(resultadoCuadrar>0){
                    JOptionPane.showMessageDialog(this, "La diferencia se actualizÃ³ correctamente", "Exito", JOptionPane.INFORMATION_MESSAGE);
                    initJLabel();
                }else{
                    JOptionPane.showMessageDialog(this, "No se pudo actualizar la diferencia", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(CuadreCaja.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCuadreActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CuadreCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CuadreCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CuadreCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CuadreCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new AltaCliente2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCuadre;
    private javax.swing.JButton btnRetroceder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblCajero;
    private javax.swing.JLabel lblDiferencia;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblTotalContado;
    private javax.swing.JLabel lblTotalEsperado;
    private javax.swing.JTextField txfIngresar;
    private javax.swing.JTextField txfRetirar;
    // End of variables declaration//GEN-END:variables
    private Sesion sesion;
    private javax.swing.table.DefaultTableModel modeloTabla;
    int nuevaCantidad=0;
}
